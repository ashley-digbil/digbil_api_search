'use strict';

// This model represent a physical machine


var crypto = require('crypto');
var oplogSchema = require('./oplog');

function genToken() {
    return crypto.randomBytes(16).toString('hex');
}

module.exports.load = function(mongoose) {
    var Schema = mongoose.Schema;

    return new Schema({
        mac_address: String,
        ddate: Date,
        oplogs: [oplogSchema.create()],
        ts: {
            type: Date,
            default: Date.now
        },

        // random string to map to a sign server's id
        access_token: {
            type: String,
            default: genToken,
            index: true
        },

        name: String,
        description: String,
        timezone: String,

        tags: [ {
            type: String,
            trim: true,
            _id: false
        } ],

        reactor: {
            // for the moment, the config of the reactor is stored in a file
            // on S3. Later it'll be handled by the UI and stored in DB
            // but for the moment we need this quick access.
            config_uri: String
        },

        user: { // creator of the resource
            type: Schema.Types.ObjectId,
            ref: 'userprofile'
        },

        entity: {
            type: Schema.Types.ObjectId,
            ref: 'entities'
        },

        // unix epoch timestamp of the last ping
        last_ping: {
            type: Number,
            default: Date.now
        },

        // hibernation settings
        // HHmmss
        sleep_time: String,
        wake_up_time: String

    });
}
