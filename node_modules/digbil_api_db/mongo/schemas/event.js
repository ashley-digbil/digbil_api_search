'use strict';
var oplog_schema = require('./oplog');
var get_now_utc = require('../../utils').get_now_utc;

module.exports.load = function(mongoose) {
    var Schema = mongoose.Schema;
    var ObjectId = Schema.Types.ObjectId;

    return new Schema({
        ts: {
            type: Date,
            default: get_now_utc
        },
        name: String,
        description: String,
        start: String, //YYYYMMDDHHmmss
        end: String, //same
        ddate: Date,
        player: {
            type:Â ObjectId,
            ref: 'player'
        },
        playback_counts: [ new Schema({
            media: {
                type: ObjectId,
                ref: 'media'
            },
            count: {
                type: Number,
                default: 0
            }
        }, {_id: false})],
        last_playback_ts: Date,
        original_event: {
            type: ObjectId,
            ref: 'event'
        },
        media: {
            type: ObjectId,
            ref: 'media'
        },
        deck: {
            type: ObjectId,
            ref: 'deck'
        },
        entity: {
            type: ObjectId,
            ref: 'entities'
        },
        repeat: {
            freq: String,
            interval: Number,
            until: String, //YYYYMMDD
            count: Number,
            by_day: [String]
        },
        oplogs: [oplog_schema.create()],

        // flag to keep track of the media status
        // to allow creation of events when media is transcoding
        pending_media: {
            type: Boolean,
            default: false
        },

        campaign: {
            type: ObjectId,
            ref: 'campaign'
        }
    });
}
