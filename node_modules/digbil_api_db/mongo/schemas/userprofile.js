/*
 * @author Renaud Sauvain
 * @date 18.10.2011
 */

/**
 * user.profile wrapper
 */

var webHooksSchema = require('./_web_hooks');
module.exports.load = function(mg) {
	var Schema = mg.Schema;

	var Address = require('./_general').Address(mg, true);

	/**
	 * no schema here : this is not an edoc
	 */
	var settings = {
		"loc" : {
			"lang" : String,// <ISO 639>,
			"numeric" : String// <ISO 3166>,
		},
		"email_notifications" : {
			'ds_status' : {
				type : Boolean,
				'default' : false
			},
			'media_status' : {
				type : Boolean,
				'default' : false
			},
			'camp_status' : {
				type : Boolean,
				'default' : false
			},
			'camp_warning' : {
				type : Boolean,
				'default' : false
			}
		}
	};

	var ops = new Schema({
		'ts' : {
			type : Date,
			'default' : Date.now
		},
		'comment' : {
			type : String,
			trim : true
		},
		"optype" : {
			type : Number
		},
		"issuer" : {
			"service" : String, // fe-mcs
			"privip" : String,
			"pubip" : String,
			"host" : String,
			"user" : {
				type : Schema.Types.ObjectId,
				ref : 'userprofile'
			}
		}
	});

	var url = new Schema({
		"desc" : {
			type : String,
			trim : true
		},
		"url" : String
	});

	var email = new Schema({
		"cdate" : {
			type : Date,
			'default' : Date.now
		},
		"addr" : {
			type : String,
			trim : true
		},
		"isdef" : {
            type: Boolean,
            default: true
        },
		"stat" : {
			type : Number,
			default : 1
		},
		"ddate" : Date
	}, {
        _id: false // email addresses are uniques
    });

	var User = new Schema({
		"cdate" : {
			type : Date,
			'default' : Date.now
		},
		"ts" : {
			type : Date,
			'default' : Date.now
		},
		"ddate" : Date,
		"gen" : Boolean,
		"fn" : {
			type : String,
			trim : true
		},
		"ln" : {
			type : String,
			trim : true
		},
		"bdate" : Date,
		"links" : [ url ],
		"addr" : [ Address ],
		"tel" : String,
		"ipaddr" : {
			"v4" : String,
			"v6" : String
		},
		"email" : [ email ],
		"pass" : {
			type : String,
			index : true
		},
        "salt" : String,
		"settings" : settings,
		"stat" : {
			type : Number,
			'default' : 1
		},
		'ops' : [ ops ],
        "role" : {
            type : Schema.Types.ObjectId,
            ref : "roles"
        },
        "role_name" : {
            type : String,
        },

        entities: [new Schema({
            id: {
                type: Schema.Types.ObjectId,
                ref: 'entities'
            },
            role: {
                type: Schema.Types.ObjectId,
                ref: 'roles'
            },
            // store role_name for UI sorting ($sort: entities.$.role_name: 1)
            role_name: String,

            // to avoid a lookup to the given entity document
            is_banned: {
                type: Boolean,
                default: false
            }
        }, {_id: false})],

        // last entity used by the user (can be null)
        last_entity: {
            type: Schema.Types.ObjectId,
            ref: 'entities'
        },

        // keep the field entity for backward compatibility reasons.
        // Remove them when the UI will be completely updated with the new
        // version
		"entity": {
			type : Schema.Types.ObjectId,
			ref : "entities"
		},

        web_hooks: webHooksSchema()

	});

    User.virtual('locale').get(function() {
        if(this.settings && this.settings.loc) {
            return this.settings.loc.lang;
        } else {
            return undefined;
        }
    });

	User.virtual('def_email').get(function() {
		// get default email
		var def = null;
		if (this.email)
			for ( var e_i = 0; e_i < this.email.length; e_i++) {
				if (this.email[e_i].isdef) {
					def = this.email[e_i].addr;
					break;
				}
			}
		return def;
	});

	User.set('versionKey', false);
	return User;
};
