'use strict';
var Promise = require('bluebird');
var fs = Promise.promisifyAll(require('fs'));

// all migrations older than this date have been run manualy and will be ignored
var startLimit = new Date(2014, 5, 19);

function isMigration(name) {
    return /^\d{12}/.test(name);
}

function getMigrationDate(name) {
    var year = parseInt(name.slice(0, 4));
    var month = parseInt(name.slice(4,6))-1;
    var day = parseInt(name.slice(6,8));
    var hours = parseInt(name.slice(8, 10));
    var minutes = parseInt(name.slice(10, 12));
    return new Date(year, month, day, hours, minutes);
}

module.exports = function runMigrations(db, logger) {
    if(!logger) logger = require('./simpleLogger');

    var Migration = db.models.migration;

    var lastMigration = Promise.cast(Migration.findOne()
    .where('date').gte(startLimit)
    .sort({date: -1})
    .exec());

    var migrationFiles = fs.readdirSync(__dirname+'/migrations');
    migrationFiles = migrationFiles.filter(isMigration);

    var toRun = lastMigration.then(function(lastMigration) {
        var limit = startLimit.getTime();
        if(lastMigration &&
           lastMigration._id.getTimestamp().getTime() > startLimit
        ) {
            limit = lastMigration._id.getTimestamp().getTime();
        }

        return migrationFiles.filter(function(name) {
            return limit < getMigrationDate(name).getTime();
        }).sort(function(a, b) {
            return getMigrationDate(a).getTime() - getMigrationDate(b).getTime();
        });

    });

    var run = toRun.then(function(migrations) {

        if(!migrations.length) {
            logger.info('No migration to run.');
            return;
        }

        logger.info('Running %d migrations', migrations.length);

        return migrations.reduce(function(prev, current) {
            return prev.then(function() {
                var name = current.slice(13, current.lastIndexOf('.'));
                logger.info('Running migration %s', current);
                var migration = require(__dirname+'/migrations/'+current);
                return migration.run(db, logger).then(function() {
                    var m = new Migration({name: name});
                    return Promise.promisify(m.save, m)();
                }).tap(function() {
                    logger.info('-- done');
                });
            });
        }, Promise.resolve());
    });


    return run;

}
