'use strict';
var _ = require('lodash');

global.LOCALS = {
    logger: {
        getLogger: function(){}
    }
};

var apiDb = require('../index');
var Promise = require('bluebird');

var envData = {
    test: {
        host: 'localhost',
        port: 27017,
        db: 'digbil_test'
    },

    dev: {
        host: 'fusiondev.mongo.digbil.com',
        port: 27017,
        db: 'digbil_dev',
    },

    perftest: {
        host: 'oceanic.mongohq.com',
        port: 10001,
        db: 'digbil_perftest',
        user: 'digbil-fe-perf',
        password: 'digbil-fe-perf'
    },

    stage: {
        host: ['lighthouse.0.mongolayer.com', 'lighthouse.1.mongolayer.com'],
        port: [10138, 10138],
        db: ['digbil_fusion_stage', 'digbil_fusion_stage'],
        user: 'digbil-fe',
        password: '3be70c8ef2cc8e88c8977160616f70f4'
    },

    fusion: {
        host: 'oceanic.mongohq.com',
        port: 10097,
        db: 'digbil_fusion',
        user: 'digbil-fusion',
        password: 'e8a7f77491a1cfb2c81d65a410c46263'
    },

    fusionCluster: {
        host: ['lighthouse.0.mongolayer.com','lighthouse.1.mongolayer.com'],
        port: [10046, 10046],
        db: ['digbil_fusion', 'digbil_fusion'],
        user: 'digbil-fusion',
        password: 'O3E5AbBnIVqg'
    }
}

function getUrlForEnv(env) {
    var url = 'mongodb://';
    if(env.user && env.password) {
        url += env.user+':'+env.password+'@';
    }
    if(Array.isArray(env.host)) {
        url += _.zip(env.host, env.port, env.db).map(function(data) {
            return data[0]+':'+data[1]+'/'+data[2];
        }).join(',');
    } else {
        url += env.host+':'+env.port+'/'+env.db;
    }
    console.log('connecting to url:', url);
    return url;
}

// env can be 'test', 'dev' or 'stage'
module.exports = function(env) {
    env = env || 'test';

    var url;
    switch(env) {
        case 'test':
            url = getUrlForEnv(envData.test);
            break;
        case 'dev':
            url = getUrlForEnv(envData.dev);
            break;
        case 'stage':
            url = getUrlForEnv(envData.stage);
            break;
        case 'perftest':
            url = getUrlForEnv(envData.perftest);
            break;
        case 'fusion':
            url = getUrlForEnv(envData.fusion);
            break;
        case 'fusionCluster':
            url = getUrlForEnv(envData.fusionCluster);
            break;
        case 'poc':
            console.warn('poc environment is deprecated, use stage instead');
            url = getUrlForEnv(envData.stage);
            break;
        case 'localdev':
            url = 'mongodb://localhost:27017/digbil_dev_backup';
            break;
        default:
            throw new Error('Unknown environment: '+env)
    }

    console.log('connecting to '+url);
    return apiDb.connect(url, {}, console);
}

module.exports.data = envData;
