'use strict';

var Promise = require('bluebird');
var _ = require('lodash');

function migrateRoles(Role, Permission, User, ids) {
    var defaultRoles = require('../migrations/assets/defaultRoles');
    var permissionMapping = require('../migrations/assets/permissionMapping');

    var oldNames = ['Sign Owner', 'Content Manager', 'Systems Integrator', 'End User'];
    var roleNameMap = {
        'Sign Owner': _.findWhere(defaultRoles, {name: 'Administrator'}),
        'Systems Integrator': _.findWhere(defaultRoles, {name: 'Systems Integrator'}),
        'Content Manager': _.findWhere(defaultRoles, {name: 'Publisher'}),
        'End User': _.findWhere(defaultRoles, {name: 'Designer'})
    };

    var rolesToChange = Promise.cast(
        Role.find()
        .where('set_role', true)
        .where('name').in(oldNames)
        .where('_id').in(ids)
        .where('desc', null)
        .exec()
    );

    function getRightsForRtype(role, rtype) {
        var functionName = permissionMapping[rtype];
        if(!functionName) return -1;
        var privilege = _.findWhere(role.privileges, {function: functionName});
        if(!privilege) return -1;
        var rights = '';
        if(privilege.create) rights += 'C';
        if(privilege.read) rights += 'R';
        if(privilege.update) rights += 'U';
        if(privilege.delete) rights += 'D';
        return rights;
    }

    var updateRoles = rolesToChange.map(function(role) {
        var newRole = roleNameMap[role.name];
        role.name = newRole.name;
        role.desc = newRole.desc;
        role.code = newRole.code;
        role.privileges = newRole.privileges;

        var saveRole = Promise.promisify(role.save, role)();
        var permissions = Promise.cast(
            Permission.find()
            .where('role', role._id)
            .where('all_doc', true)
            .exec()
        );

        var updatePermissions = permissions.map(function(perm) {
            var rights = getRightsForRtype(role, perm.rtype);
            if(rights === -1) {
                return Permission.findByIdAndRemove(perm._id).exec();
            }

            perm.rights = rights;
            return Promise.promisify(perm.save, perm)();
        });

        return Promise.all([saveRole, updatePermissions]);
    });

    // After update, administrators should actually be system integrators
    // The update step works this way to simplify the transfer of default roles
    var transferRoles = updateRoles.then(function() {
        return Role.find().where('name', 'Administrator').exec();
    })
    .map(function(adminRole) {
        var siRole = Role.findOne()
        .where('name', 'Systems Integrator')
        .where('entity', adminRole.entity)
        .exec();

        return siRole.then(function(siRole) {
            if(!siRole) return;
            return User.update({
                'entities.role': adminRole._id
            }, {
                'entities.$.role': siRole._id,
                'entities.$.role_name': siRole.name,
                role: siRole._id,
                role_name: siRole.name
            }, {
                multi: true
            }).exec();
        });
    });

    var superAdminDescription = Role.update({
        name: 'Super Admin'
    }, {
        desc: '{\"design\":true,\"publish\":true,\"admin\":true,\"si\":true}'
    }, {
        multi: true
    }).exec();

    return Promise.all([transferRoles, superAdminDescription]);
}



module.exports.run = function run(db, logger) {
    var Role = db.get_collection('roles');
    var Permission = db.get_collection('permissions');
    var User = db.get_collection('userprofile');
    var start = Date.now();

    var rolesPerm = Permission.distinct('role').exec();
    var allRoles = Role.distinct('_id').exec();

    return Promise.all([allRoles, rolesPerm])
    .spread(function(allRoles, rolesPerm) {
        allRoles = allRoles.map(String);
        rolesPerm = rolesPerm.map(String);

        var deletedRoles = _.difference(rolesPerm, allRoles);
        var noPermissionRole = _.difference(allRoles, rolesPerm);

        logger.debug('got %d roles with no permissions', noPermissionRole.length);
        logger.debug('got %d deleted roles with remaining permissions', deletedRoles.length);

        var cleanup = Promise.all([
            Role.remove({_id: {$in: noPermissionRole}}).exec(),
            Permission.remove({role: {$in: deletedRoles}}).exec()
        ])
        .then(function() {
            logger.debug('roles and permissions cleaned up');
        });


        var okIds = _.difference(allRoles, noPermissionRole);
        var migration = migrateRoles(Role, Permission, User, okIds);

        return Promise.all([cleanup, migration])
    })
    .then(function() {
        logger.info('migration completed in %d ms', Date.now() - start);
    });

}
