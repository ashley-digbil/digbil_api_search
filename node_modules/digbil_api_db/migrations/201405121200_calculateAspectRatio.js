// This migration adds the layout privileges to roles
// and the corresponding permissions in database.
//
// to run this:
// nvm use 0.11 
// node --harmony 2014_0512_calculateAspectRatio.js dev
// (replace dev with the desired environment)
'use strict';

let Promise = require('bluebird');
let mongoose = require('mongoose');
let ObjectId = mongoose.Types.ObjectId;
let _ = require('lodash');

var argv = require('minimist')(process.argv.slice(2));
var env = argv._[0] || 'test';
console.log('Migration on environment: '+ env);

function gcd(a, b) {
    if (b === 0) return a;
    return gcd(b, a % b);
}

// return a string "w:h"
function computeAspectRatio(width, height) {
    var divisor = gcd(width, height);
    return (width/divisor) + ':' + (height/divisor);
}

Promise.coroutine(function* () {

    let db = yield require('./connect')(env);
    let Medias = db.get_collection('media');
    let Permissions = db.get_collection('permissions');

    let medias = yield Medias.find().exec();

    let calculateAspectRatio = yield medias.map(Promise.coroutine(function* (media) {
        if(media.mfiles && media.mfiles.length > 0 && media.mfiles[0].wres && media.mfiles[0].hres){
            var width = 0;
            var height = 0;
            //find bigest resolution
            //
            media.mfiles.forEach(function(mfile){
                if(mfile.wres && parseInt(mfile.wres) > width){
                    width = parseInt(mfile.wres);
                    height = parseInt(mfile.hres);
                }
            });
            if(width && height) {
                media.aspect_ratio = computeAspectRatio(width, height);
            }
        }
        console.log("updating aspect ratio for media %s.", media._id);
        return Promise.promisify(media.save, media)();
    }));

    console.log('all media have been updated');
    process.exit(0);
})();
