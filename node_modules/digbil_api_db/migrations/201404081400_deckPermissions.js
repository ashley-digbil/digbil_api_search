// This migration adds the deck privileges to roles
// and the corresponding permissions in database.
//
// to run this:
// `nvm use 0.11 && node --harmony deckPermission.js` dev
// (replace dev with the desired environment)
'use strict';

let Promise = require('bluebird');
let mongoose = require('mongoose');
let ObjectId = mongoose.Types.ObjectId;
let _ = require('lodash');

var argv = require('minimist')(process.argv.slice(2));
var env = argv._[0] || 'test';
console.log('Migration on environment: '+ env);

Promise.coroutine.addYieldHandler(function(a) {
  if(Array.isArray(a)) return Promise.all(a);
});

Promise.coroutine(function* () {

    let db = yield require('./connect')(env);
    let Roles = db.get_collection('roles');
    let Permissions = db.get_collection('permissions');

    let roles = yield Roles.find().exec();

    let addPrivileges = yield roles.map(Promise.coroutine(function* (role) {
        if(!role.privileges || !role.privileges.length) return;
        let deckPrivilege = _.find(role.privileges, function(p) {
            return p.function === 'Deck';
        });

        if(deckPrivilege) return

        let mediaPrivilege = _.find(role.privileges, function(p) {
            return p.function === 'Media';
        });

        if(!mediaPrivilege) {
            console.log('no media privilege for role: ', role);
            return
        }

        // deck privilege will be the same as the media privilege
        mediaPrivilege = mediaPrivilege.toObject();
        let newPrivilege = _.assign({
            function: 'Deck'
        }, _.omit(mediaPrivilege, 'function', 'groups'));

        console.log('adding new deck privilege for role %s', role._id);
        role.privileges.push(newPrivilege);
        role.markModified('privileges');
        return Promise.promisify(role.save, role)();
    }));

    let removeDeckBuilder = yield roles.map(Promise.coroutine(function* (role) {
        if(!role.privileges || !role.privileges.length) return;
        let deckBuilderPrivilege = _.find(role.privileges, function(p) {
            return p.function.toLowerCase() === 'deckbuilder';
        });

        if(!deckBuilderPrivilege) return;

        role.privileges = role.privileges.filter(function(p) {
            return p.function.toLowerCase() !== 'deckbuilder';
        });

        role.markModified('privileges');
        return Promise.promisify(role.save, role)();
    }));

    console.log('all roles have been updated');

    let permissions = yield Permissions.find().where('rtype', 3).exec();
    let mediaPermissions = yield Permissions.find()
        .where('rtype', 3)
        .exec();

    // for each media permissions, check if there is a corresponding
    // deck permission for the same entity and role. If not, add it

    let addPermissions = yield mediaPermissions.map(Promise.coroutine(function* (media) {
        let deckPerm = yield Permissions.findOne()
            .where('rtype', 14)
            .where('entity', media.entity)
            .where('role', media.role)
            .exec();
        if(deckPerm) return;

        let newPerm = new Permissions({
            role: media.role,
            rights: media.rights,
            rtype: 14,
            all_doc: media.all_doc,
            entity: media.entity
        });
        return Promise.promisify(newPerm.save, newPerm)();
    }));
    console.log('permissions added');
    process.exit(0);
})();
