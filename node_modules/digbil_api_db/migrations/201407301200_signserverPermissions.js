'use strict';
var Promise = require('bluebird');
var _ = require('lodash');

// Add the signserver permission to the existing roles
module.exports.run = function run(db, logger) {
    var Roles = db.get_collection('roles');
    var Permissions = db.get_collection('permissions');

    var roles = Promise.cast(Roles.find().exec());

    var addPrivilegesToRoles = roles.map(function(role) {
        var signserverPriv = _.find(role.privileges, function(priv) {
            return priv.function === 'Signserver';
        });

        if(signserverPriv) return;

        var playerPriv = _.find(role.privileges, function(priv) {
            return priv.function === 'Players';
        });

        if(!playerPriv) {
            logger.warn('No player privilege for role %s', role._id);
            return
        }

        playerPriv = playerPriv.toObject();
        var newPriv = _.assign({
            function: 'Signserver'
        }, _.omit(playerPriv, 'function', 'groups', '_id'));
        role.privileges.push(newPriv);
        role.markModified('privileges');
        return Promise.promisify(role.save, role)();
    })
    .all();

    var addPermissions = roles.map(function(role) {
        var existing = Promise.cast(
            Permissions.findOne()
            .where('role', role._id)
            .where('rtype', 17)
            .exec()
        );

        var playerPerm = Promise.cast(
            Permissions.findOne()
            .where('role', role._id)
            .where('rtype', 12)
            .exec()
        );

        return Promise.join(existing, playerPerm, function(existing, playerPerm) {
            if(existing) return;
            if(!playerPerm) {
                logger.warn('No Players permission for role %s', role._id);
                return
            }

            var newPerm = new Permissions({
                role: role._id,
                rights: playerPerm.rights,
                rtype: 17,
                all_doc: playerPerm.all_doc,
                entity: playerPerm.entity
            });

            return Promise.promisify(newPerm.save, newPerm)();
        });

    })
    .all();

    return Promise.all([addPrivilegesToRoles, addPermissions]);
};
