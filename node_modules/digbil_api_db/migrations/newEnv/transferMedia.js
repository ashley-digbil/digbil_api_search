'use strict';

// transfer a media from a bucket to another one
// and print some data of the original media files in a json file:
// transferData.json
// These data should be used to create the new documents in the new environment
//
// This script is designed to be run manually if there are new defaults media
// to add to the list of default stuff to create with an entity.

var targetBucket = 'digbil-debian';
var targetFolder = 'defaultDataNewEnv/';
var targetRegion = 'us-west-1';

// medias to copy (on dev db)
var mediaIds = ['53ad25763f6c081443a929f1', '53ad25813f6c081443a929f2'];

var credentials = {
    accessKeyId : "AKIAJ43ASKRC4XQIP4YQ",
    secretAccessKey : "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",
    AWS_Id : "985751554534"
}

var ObjectId = require('mongodb').ObjectID;
var fs = require('fs');
var Promise = require('bluebird');
Promise.defer = function() {
    var resolve, reject;
    var promise = new Promise(function() {
        resolve = arguments[0];
        reject = arguments[1];
    });

    function callback() {
        if(arguments[0]) return reject(arguments[0]);
        else return resolve([].slice.call(arguments, 1));
    }

    return {
        promise: promise,
        reject: reject,
        resolve: resolve,
        callback: callback
    }
}

var AWS = require('aws-sdk');
AWS.config.update(credentials);
var s3 = Promise.promisifyAll(new AWS.S3());

function s3DataFromUri(uri) {
    // get rid of protocol and slashes
    var split = uri.split('/').slice(2);
    return {
        bucket: split[1],
        key: split.slice(2).join('/')
    }
}

function connect() {
    var MongoClient = require('mongodb').MongoClient;

    var resolver = Promise.defer();
    MongoClient.connect('mongodb://dev.mongo.digbil.com:27017/digbil_dev', resolver.callback);

    return resolver.promise.get(0);
}

connect().then(function(db) {
    var Media = db.collection('media');

    function findById(id) {
        if('string' === typeof id) id = new ObjectId(id);
        var resolver = Promise.defer();
        Media.findOne({_id: id}, resolver.callback);
        return resolver.promise.get(0);
    }


    var medias = mediaIds.map(findById);

    var copyAll = Promise.all(medias).map(function (media) {
        console.log('processing media %s (%s)', media.name, media._id);

        // copy mfiles
        var mfiles = Promise.all(media.mfiles).map(function (mfile) {
            var uri = mfile.uri[0]; // only get the first one
            uri = uri.slice(0, uri.lastIndexOf('?torrent'));
            var s3Data = s3DataFromUri(uri);
            var copySource = encodeURI(s3Data.bucket+'/'+s3Data.key);

            var params = {
                Bucket: targetBucket,
                Key: targetFolder+mfile._id,
                CopySource: copySource,
                ACL: 'public-read'
            };

            return s3.copyObjectAsync(params).then(function() {
                var newUri = 'https://s3-'+targetRegion+'.amazonaws.com/';
                newUri += targetBucket+'/'+params.Key;
                return {
                    size: mfile.size,
                    hres: mfile.hres,
                    wres: mfile.wres,
                    md5: mfile.md5,
                    uri: [newUri]
                }
            });
        }, {concurrency: 2});

        var thumbs = Promise.all(media.thumbs).map(function(thumb, idx) {
            var uri = thumb.uri;
            var s3Data = s3DataFromUri(uri);
            var copySource = encodeURI(s3Data.bucket+'/'+s3Data.key);

            var params = {
                Bucket: targetBucket,
                Key: targetFolder+media._id+'_thumb_'+idx,
                CopySource: copySource,
                ACL: 'public-read'
            };

            return s3.copyObjectAsync(params).then(function() {
                var newUri = 'https://s3-'+targetRegion+'.amazonaws.com/';
                newUri += targetBucket+'/'+params.Key;
                return {
                    dim: thumb.dim,
                    uri: newUri
                }
            }, {concurrenc: 2});

        });

        return Promise.join(thumbs, mfiles, function(thumbs, mfiles) {
            return {
                aspect_ratio: media.aspect_ratio,
                len: media.len,
                mfiles: mfiles,
                thumbs: thumbs,
                name: media.name,
                transcoding_status: 3
            }
        }).tap(function() {
            console.log('media %s (%s) done', media.name, media._id);
        });

    }, {concurrency: 1});

    copyAll.then(function(medias) {
        console.log('all done', medias);
        fs.writeFileSync(__dirname+'/transferData.json', JSON.stringify(medias));
        process.exit(0);
    });

});
