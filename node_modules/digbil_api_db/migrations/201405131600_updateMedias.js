// This migration adds the 'transcoding_status' field to
// the existing media if not already present. This is to make
// media converted with the old code compatible with the new one
//
// to run this:
// `nvm use 0.11 && node --harmony imagePermission.js` dev
// (replace dev with the desired environment)
'use strict';

let Promise = require('bluebird');
let mongoose = require('mongoose');
let ObjectId = mongoose.Types.ObjectId;
let _ = require('lodash');
let logger = require('log4js').getLogger();

function uncurryThis(f) {
    return function () {
        return f.call.apply(f, arguments)
    };
}

var argv = require('minimist')(process.argv.slice(2));
var env = argv._[0] || 'test';
logger.info('Migration on environment: '+ env);

Promise.coroutine(function* () {

    let db = yield require('./connect')(env);
    let Media = db.model('media');

    let oldMedias = yield Media.find()
    .where('transcoding_oplogs.0').exists(false)
    .where('ops.0').exists(true)
    .exec();

    logger.info('old medias: %d', oldMedias.length);
    let status = {};
    oldMedias.forEach(function(m) {
        m = m.toObject();
        if(!status[m.stat]) status[m.stat] = 1
        else status[m.stat] = status[m.stat] + 1;
    });

    let errored = oldMedias.filter(function(m) {
        return m.toObject().stat === -1 || m.toObject().stat === 4;
    });
    logger.info('%d errored media', errored.length);

    let ok = oldMedias.filter(function(m) {
        return m.toObject().stat === 1;
    });
    logger.info('%d ok media', ok.length);

    let processing = oldMedias.filter(function(m) {
        return m.toObject().stat === 0 || m.toObject().stat === null
    });
    logger.info('%d in progress', processing.length);
    if(processing.length) {
        logger.warn('Media in progress, abort migration');
        process.exit(1);
    }

    logger.info('Updating all old medias');

    yield oldMedias.map(function(m) {
        let raw = m.toObject();
        let jobId = Number(raw.ops[0].comment);
        if(!jobId) jobId = null;
        m.transcoding_job_id = jobId;

        m.transcoding_oplogs = [{
            ts: new Date(raw.ops[0].ts),
            comment: 'Job submitted'
        }];

        if(raw.stat === -1 || raw.stat === 4) {
            // errored
            m.transcoding_status = -1;
        } else if(raw.stat === 1) {
            // finished
            m.transcoding_status = 3;
        }

        raw.ops.forEach(function(op) {
            if(op.status === 4 || op.status === -1) {
                m.transcoding_oplogs.push({
                    ts: op.ts,
                    error: op.comment
                });
            } else {
                m.transcoding_oplogs.push({
                    ts: op.ts,
                    comment: op.comment
                });
            }
        });

        m.transcoding_oplogs.push({
            ts: new Date(),
            comment: 'old event migrated'
        });
        m.ops = [];
        m.markModified('ops');

        return Promise.promisify(m.save, m)();
    });
    logger.info('All medias migrated');

    process.exit(0);
})()
.catch(function(err) {
    logger.error(err);
    process.exit(1);
});
