// Remove share group setting of Media / Players / Layouts permission.
// And integrate it to Groups permission
// nvm use 0.11 
// node --harmony 201406181500_integrateShareGroup.js dev
// (replace dev with the desired environment)
'use strict';

let Promise = require('bluebird');
let mongoose = require('mongoose');
let ObjectId = mongoose.Types.ObjectId;
let _ = require('lodash');

var argv = require('minimist')(process.argv.slice(2));
var env = argv._[0] || 'test';
console.log('Migration on environment: '+ env);

Promise.coroutine(function* () {

    let db = yield require('./connect')(env);
    let Roles = db.get_collection('roles');
    let Permissions = db.get_collection('permissions');

    let roles = yield Roles.find().exec();

    let removePrivileges = yield roles.map(Promise.coroutine(function* (role) {
        if(!role.privileges || !role.privileges.length) return;

        let mediaPrivilege = _.find(role.privileges, function(p){
            return p.function === 'Media';
        });
        let playersPrivilege = _.find(role.privileges, function(p){
            return p.function === 'Players';
        });
        let layoutsPrivilege = _.find(role.privileges, function(p){
            return p.function === 'Layouts';
        });
        let groupsPrivilege = _.find(role.privileges, function(p){
            return p.function === 'Groups';
        });


        var mediaGroups = [];
        if(mediaPrivilege && mediaPrivilege.groups){
            mediaGroups = mediaPrivilege.groups;
            mediaPrivilege.groups = [];
        }
        var playersGroups = [];
        if(playersPrivilege && playersPrivilege.groups){
            playersGroups = playersPrivilege.groups;
            playersPrivilege.groups = [];
        }
        var layoutsGroups = [];
        if(layoutsPrivilege && layoutsPrivilege.groups){
            layoutsGroups = layoutsPrivilege.groups;
            layoutsPrivilege.groups = [];
        }
        var groupsGroups = [];
        if(groupsPrivilege && groupsPrivilege.groups){
            groupsGroups = groupsPrivilege.groups;
            groupsPrivilege.groups = [];
        }

        var allGroups = groupsGroups.concat(mediaGroups, playersGroups, layoutsGroups);
        groupsPrivilege.groups = _.uniq(allGroups, function(groupId){
            return groupId.toString();
        });
        console.log('Integrate share group setting for role %s', role._id);

        role.markModified('privileges');
        return Promise.promisify(role.save, role)();
    }));

    console.log('all roles have been updated');

    process.exit(0);
})();
